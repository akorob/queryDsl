apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'hello.HelloCat'

configurations {
    hibernateJpa
    queryDslJpa
}

sourceSets {
    main {
        java {
            srcDir 'src/generated'
        }
    }
}

ext.genDir = new File("${projectDir}/src/generated")


repositories {
    mavenCentral()
}

dependencies {
    compile "com.mysema.querydsl:querydsl-jpa:3.6.9"
    //compile "com.mysema.querydsl:querydsl-apt:3.6.9:jpa"
    compile "org.hibernate:hibernate-entitymanager:4.3.5.Final" 
    compile 'com.h2database:h2:1.4.187'
    compile "org.slf4j:slf4j-simple:1.7.9"
    queryDslJpa "com.mysema.querydsl:querydsl-apt:3.6.9"
    hibernateJpa "org.hibernate:hibernate-jpamodelgen:4.3.11.Final"
}

task generateJpaMetamodel(type: JavaCompile) {
    source = sourceSets.main.java
    classpath = compileJava.classpath + configurations.hibernateJpa
    destinationDir = genDir
    options.encoding = 'utf-8'
    options.compilerArgs = [
            "-proc:only"
    ]
}

/*generateJpaMetamodel.doFirst {
    genDir.mkdirs()
}*/

task generateQueryDSLMetamodel(type: JavaCompile) {
    source = sourceSets.main.java
    classpath = compileJava.classpath + configurations.queryDslJpa
    destinationDir = genDir
    options.encoding = 'utf-8'
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
}

generateQueryDSLMetamodel.doFirst {
    if (genDir.exists()) {
        genDir.deleteDir();
    }
    genDir.mkdirs()
}


clean.doLast {
    if (genDir.exists() && genDir.isDirectory()) {
        genDir.deleteDir();
    }
}

compileJava.dependsOn generateQueryDSLMetamodel
compileJava.dependsOn generateJpaMetamodel
generateJpaMetamodel.mustRunAfter generateQueryDSLMetamodel

